{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "460bf391-3617-4ad8-ade4-969f31cb4974",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import joblib\n",
    "from prophet import Prophet\n",
    "from prophet.plot import plot_plotly\n",
    "\n",
    "# ========================\n",
    "# Load dataset / model\n",
    "# ========================\n",
    "df = pd.read_csv('data/your_dataset.csv')\n",
    "xgb_model = joblib.load('model/xgb_pipeline.pkl')  # previously saved pipeline\n",
    "\n",
    "# ========================\n",
    "# Streamlit App Layout\n",
    "# ========================\n",
    "st.title(\"Car Resale Price & Trend Predictor\")\n",
    "st.write(\"Predict resale price today + future market trend for European cars.\")\n",
    "\n",
    "# -------------------------\n",
    "# User Inputs for ML\n",
    "# -------------------------\n",
    "st.header(\"Predict Resale Price for Your Car\")\n",
    "make = st.selectbox(\"Make\", sorted(df['make'].unique()))\n",
    "model_car = st.selectbox(\"Model\", sorted(df[df['make']==make]['model'].unique()))\n",
    "fuel = st.selectbox(\"Fuel Type\", sorted(df['fuel'].unique()))\n",
    "gear = st.selectbox(\"Gear Type\", sorted(df['gear'].unique()))\n",
    "mileage = st.number_input(\"Mileage (km)\", min_value=0)\n",
    "hp = st.number_input(\"Horsepower (hp)\", min_value=0)\n",
    "year = st.number_input(\"Year of Manufacture\", min_value=1980, max_value=2025)\n",
    "\n",
    "car_age = 2025 - year  # or use current year dynamically\n",
    "\n",
    "input_df = pd.DataFrame({\n",
    "    'make':[make],\n",
    "    'model':[model_car],\n",
    "    'fuel':[fuel],\n",
    "    'gear':[gear],\n",
    "    'mileage':[mileage],\n",
    "    'hp':[hp],\n",
    "    'car_age':[car_age]\n",
    "})\n",
    "\n",
    "if st.button(\"Predict Resale Price\"):\n",
    "    predicted_price = xgb_model.predict(input_df)[0]\n",
    "    st.success(f\"Estimated resale price today: â‚¬{predicted_price:,.0f}\")\n",
    "\n",
    "# -------------------------\n",
    "# Brand Forecast\n",
    "# -------------------------\n",
    "st.header(\"Market Trend Forecast for Your Brand\")\n",
    "forecast_years = 3  # next 3 years\n",
    "df_brand = df[df['make']==make].groupby('year')['price'].mean().reset_index()\n",
    "df_brand = df_brand.rename(columns={'year':'ds','price':'y'})\n",
    "df_brand['ds'] = pd.to_datetime(df_brand['ds'], format='%Y')\n",
    "\n",
    "if df_brand.shape[0] >= 2:\n",
    "    prophet_model = Prophet()\n",
    "    prophet_model.fit(df_brand)\n",
    "    future = prophet_model.make_future_dataframe(periods=forecast_years, freq='YE')\n",
    "    forecast = prophet_model.predict(future)\n",
    "\n",
    "    st.plotly_chart(plot_plotly(prophet_model, forecast))\n",
    "else:\n",
    "    st.warning(\"Not enough historical data for this brand to forecast.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
